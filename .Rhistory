# For the touchtracking data, we can save a bunch of
# hassle by scaling the x/y coordinates within
# subjects. One caveat, mousetrap data comes with x and y coordinates
# in a column, but they are a chr with all the coordinates in one string
# that's the reason this looks so complicated, basically we're just:
# 1. splitting the string into a list
# 2. scaling the list
# 3. putting the list back together as a string
scale_raw_mousetrap_data <- function(df) {
# Split data
scale_raw_data <- function(x) {
# helper function https://github.com/PascalKieslich/mousetrap/blob/master/R/import.R#L226C3-L243C66
split <- ","
# Remove all irrelevant characters
x <- gsub(pattern=paste0("[^-e0123456789.",split,"]"),replacement = "", x)
# Remove leading / end / double split characters
x <- gsub(pattern=paste0("^",split),replacement = "", x)
x <- gsub(pattern=paste0(split,"$"),replacement = "", x)
x <- gsub(pattern=paste0(split,split),replacement = "", x)
# Split according to specified character
x <- strsplit(x, split=split)
return(as.numeric(unlist(x)))
}
# get subject row indices by unique "subject_id" and "experiment_start_time" (in case two have the same id)
idxs <- df %>%
mutate(
idx = row_number()
) %>%
select(
idx,
subject_id
)
# now loop and scale/standardize each subject's data
for (i in unique(idxs$subject_id)) {
# get the indices for this subject
idxs_sub <- idxs %>%
filter(
subject_id == i
) %>%
pull(
idx
)
# get the data for this subject
subj_pos_data <- apply(
df[idxs_sub, c(
'xpos_tracking',
'ypos_tracking'
)
],
c(1, 2),
scale_raw_data
)
# get the lengths of the lists
xpos_lengths <- sapply(subj_pos_data[, 'xpos_tracking'], length)
ypos_lengths <- sapply(subj_pos_data[, 'ypos_tracking'], length)
# flatten and scale the lists
flattened_xpos <- scale(unlist(subj_pos_data[, 'xpos_tracking']))
flattened_ypos <- scale(unlist(subj_pos_data[, 'ypos_tracking']))
# put the data back together
for (j in 1:length(idxs_sub)) {
df[idxs_sub[j], 'xpos_tracking'] <- paste(flattened_xpos[1:xpos_lengths[j]], collapse = ',')
df[idxs_sub[j], 'ypos_tracking'] <- paste(flattened_ypos[1:ypos_lengths[j]], collapse = ',')
flattened_xpos <- flattened_xpos[(xpos_lengths[j] + 1):length(flattened_xpos)]
flattened_ypos <- flattened_ypos[(ypos_lengths[j] + 1):length(flattened_ypos)]
}
}
return(df)
}
# loading packages
pacman::p_load(mousetrap, tidyverse, readbulk)
# loading in data
d <- read_csv('C_Class_02/mousetracking/example_data/subject-3.csv')
# loading in data
d <- read_csv('logfiles/subject-3.csv')
# loading in data
d <- read_csv('log_files/subject-3.csv')
# loading in data
d <- read_csv('log_files/subject-3.csv')
# loading in data
d <- read_csv("log_files/subject-0.csv")
d_tt <- read_bulk('C_Class_02/mousetracking/example_data/touchtracker/',
extension = 'csv')
d_tt <- read_bulk('log_files/',
extension = 'csv')
View(d_tt)
m <- mt_import_mousetrap(d)
m_tt <- mt_import_mousetrap(
d_tt,
mt_id_label = c(
"log_sequence",
"subject_id",
"experiment_start_time"),
verbose = TRUE
)
# initial plot
mt_plot(m)
# specified
mt_plot(data = m, use = 'trajectories')
# align the mouse trajectories to one side
m <- mt_remap_symmetric(
m,
use = 'trajectories',
remap_xpos = "left"
)
# plot again
mt_plot(
m,
use = 'trajectories',
color = 'trial_type'
)
# for touchtracker data, 1st align starts
m_tt <- mt_align_start(
m_tt,
use = 'trajectories',
dimensions = c("xpos", "ypos")
)
m_tt <- mt_import_mousetrap(
d_tt,
# mt_id_label = c(
#   "log_sequence",
#   "subject_id",
#   "experiment_start_time"),
verbose = TRUE
)
View(m_tt)
# initial plot
mt_plot(m)
# specified
mt_plot(data = m, use = 'trajectories')
# initial plot with touchtracker data
# note, different screen sizes will mean the data looks like it starts in different places
mt_plot(m_tt)
mt_plot(m, color = 'trial_type')
mt_plot(m_tt)
mt_plot(m_tt, color = deontological_button)
View(d_tt)
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
d_tt <- d_tt %>%
mutate(answer = if_else(xpos_mouse[-1] < 0), "left_button", "right_button")
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
d_tt <- d_tt %>%
mutate(answer = if_else(xpos_mouse[-1] < 0), "left_button", "right_button"))
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
d_tt <- d_tt %>%
mutate(answer = if_else(xpos_mouse[-1] < 0, "left_button", "right_button"))
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
d_tt <- d_tt %>%
mutate(answer = if_else(tail(xpos_mouse) < 0, "left_button", "right_button"))
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
d_tt <- d_tt %>%
mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
View(d_tt)
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse
m_tt[["trajectories"]]
View(m_tt)
view(m_tt$trajectories)
m_tt[["trajectories"]]
view(m_tt[["trajectories"]])
m_tt[["trajectories"]]
as_tibble(m_tt$trajectories)
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse[1]
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse[[1]]
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse[1][1]
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse[[11]]
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse[[1,1]]
d_tt <- read_bulk('log_files/',
extension = 'csv')
#add button press
#d_tt <- d_tt %>%
# mutate(answer = if_else(tail(xpos_mouse, n = 1) < 0, "left_button", "right_button"))
d_tt$xpos_mouse[-1]
